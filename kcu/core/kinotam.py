import time
from datetime import datetime
from typing import TypedDict

import requests
from config.log_config import logger
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service

from config.settings import Settings


class ConfigurationError(Exception):
    """Custom exception for configuration errors."""
    pass


class CookiesDict(TypedDict):
    """TypedDict for cookies."""
    sessionid: str
    csrf: str
    sid: str

class Kinotam:
    def __init__(self, app_settings: Settings):
        self.url = app_settings.url
        self.url_admin = app_settings.url_admin
        self.tm = app_settings.tm
        self.auth_method = app_settings.auth_method
        self.cat_id = app_settings.cat_id
        self.limit = app_settings.limit
        self.max_limit = app_settings.max_limit
        self.tg_chat_id = app_settings.tg_chat_id
        self.tg_user_id = app_settings.tg_user_id
        self.tg_token = app_settings.tg_token

        self.cookies = self.get_cookies()

    def get_cookies(self, max_retries=3, delay=2):
        if self.auth_method == "browser":
            return self._get_cookies_with_browser()
        elif self.auth_method == "request":
            return self._get_cookies_with_request(max_retries, delay)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {self.auth_method}")
            raise ConfigurationError()

    def _get_cookies_with_browser(self) -> CookiesDict | None:
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-gpu')

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞")
        driver = webdriver.Chrome(
            service=Service("/usr/bin/chromedriver"),
            options=options
        )

        try:
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–∂—É –ø–æ {self.url_admin[:37]}... ")
            driver.get(self.url_admin)
            selenium_cookies = driver.get_cookies()
            cookies_dict = CookiesDict(**{cookie['name']: cookie['value'] for cookie in selenium_cookies})
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –∫—É–∫–∏ {cookies_dict}")
            return cookies_dict
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É–∫–æ–≤ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä: {e}")
            return None
        finally:
            driver.quit()

    def _get_cookies_with_request(
        self,
        max_retries,
        delay,
    ) -> CookiesDict | None:
        api_url = f"{self.url}/api/session/login/"
        data = {"tm": self.tm}
        cookies_dict = {"sandbox": "beta"}
        session = requests.Session()

        logger.info("–ü–æ–ª—É—á–∞—é sid —á–µ—Ä–µ–∑ HTTP-–∑–∞–ø—Ä–æ—Å")

        for attempt in range(1, max_retries + 1):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {api_url}")
                response = session.post(api_url, data=data)
                response.raise_for_status()
                json_response = response.json()
                sid = json_response.get('attributes', {}).get('sid')

                if sid:
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω sid: {sid}")
                    cookies_dict["sid"] = sid
                    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É–∫–∏: {cookies_dict}")
                    return cookies_dict
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å sid: {json_response}")
                    return None

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
                time.sleep(delay)

        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è sid")
        return None

    def get_films_to_process(self, max_retries=3, delay=2):  # TODO –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ async
        api_url = self.url + "/api/films/upload/list/"
        session = requests.Session()
        session.cookies.update(self.cookies)

        total_limit = self.limit
        start_offset = 0
        result = []

        num_full_requests = total_limit // self.max_limit
        last_chunk = total_limit % self.max_limit

        chunks = [
            (start_offset + i * self.max_limit, self.max_limit)
            for i in range(num_full_requests)
        ]

        if last_chunk > 0:
            chunks.append(
                (start_offset + num_full_requests * self.max_limit, last_chunk)
            )

        for offset, limit in chunks:
            data = {
                "Ot": self.cat_id,
                "O": offset,
                "L": limit,
                "_origin": self.url,
            }

            for attempt in range(1, max_retries + 1):
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ü–æ–ª—É—á–∞—é —Ñ–∏–ª—å–º—ã —Å OFFSET={offset}, LIMIT={limit}")
                try:
                    response = session.post(api_url, data=data)
                    response.raise_for_status()

                    json_response = response.json()
                    items = json_response.get("items")

                    if items:
                        logger.info(f"–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ O={offset}, L={limit}: {items}")
                        result.extend(items)
                        break
                    else:
                        logger.warning(f"–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç–æ–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                        time.sleep(delay)

                except Exception as e:
                    logger.warning(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}"
                    )
                    time.sleep(delay)
        if not result:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        logger.info(f"–§–∏–ª—å–º—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: {result}")
        return result

    def upload_film(self, film):

        data = {
            "Ot": self.cat_id,
            "Oi": film.get("id"),
            "title": film.get("name_to_api"),
            "torrent": film.get('magnet'),
        }

        api_url = self.url + '/api/films/upload/add/'
        session = requests.Session()
        session.cookies.update(self.cookies)

        target_name = (
            "–§–∏–ª—å–º" if self.cat_id == 91 else "–ú—É–ª—å—Ç—Ñ–∏–ª—å–º" if self.cat_id == 104 else ""
        )
        logger.info(f"–î–æ–±–∞–≤–ª—è—é {target_name} –Ω–∞ —Å–∞–π—Ç {film}")
        link_path = (
            "movie" if self.cat_id == 91
            else "cartoon" if self.cat_id == 104
            else ""
        )

        try:
            response = session.post(api_url, data=data)
            json_response = response.json()
            if json_response.get("code") == "00000":
                logger.info(f"–î–æ–±–∞–≤–∏–ª {target_name}. {json_response}, ")
                self.send_message_tg(film, f"‚úÖ *–ó–∞–ª–∏–ª {target_name}:*", link_path)
            elif json_response.get("code") == "00037":
                logger.warning(f"–ó–∞–≥—Ä—É–∂–µ–Ω –¥—É–±–ª—å. {json_response}, ")
                self.send_message_tg(film, "‚ö†Ô∏è *–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:*", link_path)
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {target_name.lower()}a. {json_response}, ")
                self.send_message_tg(film, f"‚õîÔ∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {target_name.lower()}a ({json_response.get("code")}):*", link_path)

            return response

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {target_name.lower()}–∞")
            return '–û—à–∏–±–∫–∞ ', e

    def send_message_tg(self, film, message_status, link_path):
        url = f'https://api.telegram.org/bot{self.tg_token}/sendMessage'

        message = (
            f"{message_status}\n"
            f"\n"
            f"*–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:* {datetime.now().strftime("%d.%m.%Y %H:%M")}\n"
            f"*ID:* `{film.get('id')}`\n"
            f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* `{film.get('name_to_api')}`\n"
            f"*–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏:* `{film.get('name_release')}`\n"
            f"\n"
            f"[üîó –§–∏–ª—å–º –Ω–∞ Kinotam]({self.url}/{link_path}/?Oi={film.get('id')})\n"
            f"[üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–∑–¥–∞—á—É]({film.get('url')})\n"
        )

        payload = {
            'chat_id': self.tg_chat_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ telegram")
        requests.post(url, data=payload)

